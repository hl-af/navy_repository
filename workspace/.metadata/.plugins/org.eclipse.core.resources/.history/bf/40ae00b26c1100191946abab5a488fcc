package Jan5;

public class Re_ConstructBinaryTree {
	public TreeNode reConstructBinaryTree(int [] pre,int [] in,int startIndex,int endIndex){
        int flag = 0;
        int i=0;int j = 0;
		if(startIndex == endIndex){
			TreeNode rootNode = new TreeNode(in[startIndex]);
        	return rootNode;
        }
        for(j = 0;j<pre.length;j++){
        	for(i = startIndex;i<endIndex;i++){   //这里的i在下面已经不能用了
        		if(in[i]==pre[j]){
        			flag = 1;
        			break;
        		}
        	}
        	if(flag == 1){
        		break;
        	}
        }
        TreeNode leftNode = reConstructBinaryTree(pre,in,startIndex,i-1);
        TreeNode rightNode = reConstructBinaryTree(pre,in,i+1,endIndex);
        TreeNode rootNode = new TreeNode(in[i]);
        rootNode.left = leftNode;
        rootNode.right = rightNode;
        return rootNode;
    }
	public static void main(String[] args){
		int[] pre = {1,2,4,7,3,5,6,8};
		int[] in = {4,7,2,1,5,3,8,6};
		TreeNode node = new Re_ConstructBinaryTree().reConstructBinaryTree(pre, in, 0, pre.length-1);
	}
}
